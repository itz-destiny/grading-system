/**
 * @file Firebase Security Rules for GradeAssist Application
 *
 * @description This ruleset enforces a strict user-ownership model for user profiles
 *  and uses a separate collection to manage admin roles. All data is nested under
 *  /users/{userId} to leverage Firebase Authentication's UID for security.
 *
 * @dataStructure
 *  /users/{userId}: Stores user profiles, with the document ID matching the Firebase user ID.
 *  /roles_admin/{userId}: Presence in this collection grants admin privileges. Document ID is the Firebase user ID.
 *
 * @keySecurityDecisions
 *  - User profiles are only accessible and modifiable by the authenticated user.
 *  - Admin privileges are determined by the existence of a document in the /roles_admin collection.
 *  - No user listing is allowed for the /users collection to protect user privacy. Listing the /roles_admin collection is also not allowed for security.
 *
 * @denormalizationForAuthorization
 *  - Admin status is determined by the presence of a document in the /roles_admin/{userId} collection. This avoids the need for costly `get()` calls to determine admin status.
 *
 * @structuralSegregation
 *  - Admin roles are stored in a separate collection (/roles_admin) rather than as a field on the user document. This simplifies security rules and prevents privilege escalation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to the /roles_admin collection based on the user's role.
     * @path /roles_admin/{userId}
     * @allow (get) If the user is the owner or an admin.
     * @allow (create) If the user is an admin.
     * @allow (update) If the user is an admin.
     * @allow (delete) If the user is an admin.
     * @deny  (create) If the user is not the owner and not an admin.
     * @deny  (update) If the user is not the owner and not an admin.
     * @deny  (delete) If the user is not the owner and not an admin.
     * @deny  (list) Listing of this collection is not permitted for security.
     * @principle Role-based access control. Only admins can create, update, or delete admin roles.
     */
    match /roles_admin/{userId} {
      // Helper function to check if the user is an admin
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      // Helper function to check if the user is the owner
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isAdmin();
      allow list: if false;

      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }


    /**
     * @description Manages user profiles under /users/{userId}.  Allows authenticated users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get) Authenticated user can get their own profile.
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (update) Authenticated user can update their own profile if the userId matches their auth.uid and the document exists.
     * @allow (delete) Authenticated user can delete their own profile if the userId matches their auth.uid and the document exists.
     * @deny (list) Listing of users is not allowed.
     * @deny (create) If the userId does not match the authenticated user's ID.
     * @deny (update) If the userId does not match the authenticated user's ID.
     * @deny (delete) If the userId does not match the authenticated user's ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Function to check if the user is the existing owner of a document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; // Enforce immutability of userId
      allow delete: if isExistingOwner(userId);
    }
  }
}